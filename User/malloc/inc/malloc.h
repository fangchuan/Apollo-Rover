/*
*********************************************************************************************************
*
*	模块名称 : 内存管理模块
*	文件名称 : malloc.h
*	版    本 : V1.0
*	说    明 : 
*
*	Copyright (C), 2015-2020, 阿波罗科技 www.apollorobot.cn
*
*********************************************************************************************************
*/
#ifndef __MALLOC_H
#define __MALLOC_H
#include "stm32f10x.h"

 
#ifndef NULL
#define NULL 0
#endif

//定义两个内存池
#define SRAMIN	 0		//内部内存池
#define SRAMEX   1		//外部内存池 

#ifndef USE_EXTERN_SRAM
	#define SRAMBANK 	1	//定义支持的SRAM块数.	
#else
	#define SRAMBANK  2
#endif


//mem1内存参数设定.mem1完全处于内部SRAM里面.
#define MEM1_BLOCK_SIZE					32  	  						//内存块大小为32字节
#define MEM1_MAX_SIZE						15*1024  						//最大管理内存 15K
#define MEM1_ALLOC_TABLE_SIZE		MEM1_MAX_SIZE/MEM1_BLOCK_SIZE 	//内部内存表大小:480bytes


//mem2内存参数设定.mem2的内存池处于外部SRAM里面
#define MEM2_BLOCK_SIZE					32  	  						//内存块大小为32字节
#define MEM2_MAX_SIZE						500 *1024  						//最大管理内存500K
#define MEM2_ALLOC_TABLE_SIZE		MEM2_MAX_SIZE/MEM2_BLOCK_SIZE 	//外部内存表大小：16000bytes 
 
//内存管理控制器
struct _m_mallco_dev
{
	void (*init)(u8);							//初始化
	u8 (*perused)(u8);		  	    //内存使用率
	u8 	*membase[SRAMBANK];				//内存池 管理SRAMBANK个区域的内存
	u16 *memmap[SRAMBANK]; 				//内存管理状态表
	u8  memrdy[SRAMBANK]; 				//内存管理是否就绪
};
extern struct _m_mallco_dev mallco_dev;	 //在mallco.c里面定义
u8 my_mem_perused(u8 memx);				//获得内存使用率(外/内部调用) 
void my_mem_init(u8 memx);				//内存管理初始化函数(外/内部调用)

////////////////////////////////////////////////////////////////////////////////
//用户调用函数
void myfree(u8 memx,void *ptr);  			//内存释放(外部调用)
void *mymalloc(u8 memx,u32 size);			//内存分配(外部调用)
void *myrealloc(u8 memx,void *ptr,u32 size);//重新分配内存(外部调用)
#endif

/***************************** 阿波罗科技 www.apollorobot.cn (END OF FILE) *********************************/
